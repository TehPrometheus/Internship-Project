import requests
import json
from time import sleep
import os
from dotenv import load_dotenv
load_dotenv()

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WORKATO_API_KEY = os.getenv("WORKATO_API_KEY_BUILDSHIP_CLIENT")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")
def main(input):
    run = None
    thread_id = input["thread_id"]
    userMessage = input["userMessage"]
    result = {'thread_id': "", 'assistantMessage': ""}
    OpenAIHeaders = {
        'OpenAI-Beta':"assistants=v2",
        'Authorization': f"Bearer {OPENAI_API_KEY}",
        'OpenAI-Organization': "org-E1t6e9jX4voA7kS0Tn9VfVf2"}
    WorkatoHeaders = {
        "api-token": WORKATO_API_KEY,
        "Content-Type": "application/json"
    }


    # validate input
    IsThreadIdEmpty = (thread_id == "")
    IsMessageEmpty = (userMessage == "")
    if(IsMessageEmpty):
        return {'ErrorMessage': "User message is empty"}

    # If the thread_id is empty, create a new thread, send the user message and run the thread
    if(IsThreadIdEmpty):
        body = {"assistant_id": ASSISTANT_ID,"thread": {"messages": [{"role": "user", "content": userMessage}]}}
        run = requests.post(url= "https://api.openai.com/v1/threads/runs", headers=OpenAIHeaders, json=body).json()
        thread_id = run["thread_id"]
        

    # If the thread_id is not empty, send the user message to the already existing thread and run the thread
    else:
        # Send the user message to the thread
        response = requests.post(url=f"https://api.openai.com/v1/threads/{thread_id}/messages", headers=OpenAIHeaders, json={"role": "user", "content": userMessage})
        # Run the thread
        run = requests.post(url=f"https://api.openai.com/v1/threads/{thread_id}/runs", headers=OpenAIHeaders, json={'assistant_id':ASSISTANT_ID}).json()

    # We start the main loop. Here, we periodically poll for the run status and act accordingly. 
    # Once the run status is set to 'completed', we exit the main loop and return the message generated by the assistant.
    while(run["status"] != "completed"):
        run = requests.get(url=f"https://api.openai.com/v1/threads/{thread_id}/runs/{run['id']}", headers=OpenAIHeaders).json()

        if(run["status"] == "requires_action"):
            function_outputs = requests.post(url="https://apim.workato.com/geertv1/stage-tanguy-apis-v1/get_function_outputs", json = run["required_action"]["submit_tool_outputs"],headers = WorkatoHeaders).json()
            response = requests.post(url=f"https://api.openai.com/v1/threads/{thread_id}/runs/{run['id']}/submit_tool_outputs", headers=OpenAIHeaders, json=function_outputs).json()
        
        sleep(1)
    
    # Once the run status is set to 'completed', we exit the main loop and get the response from the assistant
    response = requests.get(url=f"https://api.openai.com/v1/threads/{thread_id}/messages", headers=OpenAIHeaders, params = {"limit":1,"order":"desc"}).json()
    result["thread_id"] = thread_id
    result["assistantMessage"] = response['data'][0]["content"][0]['text']['value']

    return result

response = main({"thread_id": "thread_eUWIjT1w4dPkGZcAwGf7Lf7Q", "userMessage": "What are the bars like in Granada?"})

print(json.dumps(response, indent = 4)) 